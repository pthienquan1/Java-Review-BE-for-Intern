@RequestParam được sử dụng để truy cập (lấy) giá trị của parameters trên URL(kiểu query string)
-> truyền trong hàm
@PathVariable được sử dụng để lấy giá trị trên URI theo template (còn gọi là URI template).
-> truyền trong annotation (( ví dụ truyền trong @Getmapping thêm tham số {id})

API(Aplication Programming Interface
--> FE call API tới BE, BE sử dụng jdbc/hibernate/jpa để query xuống tới DB
--> Sau khi lấy được các dữ liệu, BE trả lại dữ liệu cho FE bằng các data có dạng JSON/XML(format)

Restful API: tiêu chuẩn để tạo ra các API cho các ứng dụng applications(GET/POST/PUT/DELETE)
--> nguyên tắc: ko đc sài động từ
VD: 
GET: http://localhost:8080/api/v1/departments 
thêm id thì /api/v1/departments/{id}
POST: http://localhost:8080/api/v1/departments (request body)
UPDATE: http://localhost:8080/api/v1/departments/5 (request body)
DELETE http://localhost:8080/api/v1/departments/5

HATEOAS: json lồng/nhúng (Embedded)

SOLID principle:
1.Single responsibility: 1 class chỉ nên giữ 1 trách nhiệm
2.Open/Closed: muốn sửa  1 hàm gì đó thì nên  tạo 1 class mới, extend từ class cũ. Từ đó class
mới đó vẫn xài đc hàm cũ từ class cũ
3.Liskov substitution: khi tạo ra lớp con để thay thế lớp cha, thì khi thằng con này ném ở mọi chỗ
dùng thằng cha thì vẫn phải work dc 1 cách hoàn chỉnh, ko đc lỗi
ví dụ có class A là cha, class B extend class A và class B' extend class B. thì khi như vậy thì
class B' không được lỗi khi class A chạy
4.Interface segregation: chia đối tượng theo các interface cụ thể
5.Dependency inversion:
--> nên phụ thuộc vào abtraction/interface



SPRING DATA JPA
- Làm việc với cả sql và nosql
-->CUSTOM QUERY: method names (hỗ trợ tự tạo ra các câu truy vấn mà mình mong muốn)
-->Sử dụng @Query Annotations: tự viết câu truy vấn

PAGING & sort
--> sử dụng Page để trả về danh sách và tham số trong parameter là Pageable
--> hỗ trợ sort khi truyền tham số có dạng &sort 

Lombok
-->giảm bớt thời gian và giảm bớt lượng code khi viết getter setter constructor không tham số,...

MODELMAPPER
--> các embedded json lồng nhau nên sử dụng model mapper thông qua DTO để giảm bớt nhiều thông tin 
không cần thiết (có thể sử dụng dto không cần modelmapper)

SPECIFICATION
-->Thêm 1 trương truy vấn (where) truy vấn linh hoạt và phức tạp
--> 2 CONDITION, 3 CONDITION ĐƯỢC
--> Nested attribute: lồng qua khóa ngoại trỏ tới bảng khác được
-->List
...

HATEOAS:
cung cấp 1 số thông tin phụ cho API

@Transactional: khi có exeption xảy ra thì sẽ rollback lại giao tác đó

VALIDATE:
1-DefaultMessage
2-Modify Output
3-Custom Annotation
4-List

